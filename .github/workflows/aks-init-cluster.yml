name: 'AKS initial cluster'
on:
  push:
    tags:
      - 'aks-cluster-create*'
  pull_request:
    tags:
      - 'aks-cluster-create*'

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    env:
      working-directory: ./azure-aks/
      TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}
    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

      # Seed file for system configuration
    - name: Setup system configruation
      run: | 
        # Sed to setup environment
        sed -i -e "s/###resource_group###/${{ secrets.AZURE_RESOURCEGROUP }}/g" ./terraform.tfvars
        sed -i -e "s/###storage_accname###/${{ secrets.AZURE_STORAGEACCOUNT }}/g" ./terraform.tfvars
        sed -i -e "s/###cluster_name###/${{ secrets.AZURE_CLUSTERNAME }}/g" ./terraform.tfvars
        sed -i -e "s/###resource_group###/${{ secrets.AZURE_RESOURCEGROUP }}/g" ./00_provider.tf
        sed -i -e "s/###storage_accname###/${{ secrets.AZURE_STORAGEACCOUNT }}/g" ./00_provider.tf
        sed -i -e "s/###cluster_name###/${{ secrets.AZURE_CLUSTERNAME }}/g" ./00_provider.tf
        
    - name: Load Terraform to operate
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.8

    - name: AKS readiness verify
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    
    - name: AKS initialize
      id: init
      run: terraform init -input=false

    - name: AKS validation configuration step1
      id: validate
      run: terraform validate -no-color

    - name: AKS validation configuration step2
      id: plan
      run: terraform plan -no-color -out=tfplan -input=false
      continue-on-error: true

    - name: AKS create cluster
      id: apply
      run: terraform apply -input=false tfplan
      continue-on-error: true

    - name: AKS export output
      id: output
      run: terraform output kube_config > aks-config
      continue-on-error: true

    - name: Export configuration (KUBECONFIG)
      id: export
      run: |
        awk 'NR>=2 && NR<=21' ./aks-config > ./aks-config.tmp
        sed -i -e "s/<<EOT//g" ./aks-config.tmp
        tail -n +2 "./aks-config.tmp" > ./aks-config
        rm ./aks-config.tmp

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      id: installkubectl

    - name: Deploy test application on AKS
      id: deploy
      run: |
          kubectl get nodes --kubeconfig=./aks-config
          kubectl apply -f ./demo/backend.yaml --kubeconfig=./aks-config
          kubectl apply -f ./demo/frontend.yaml --kubeconfig=./aks-config
          kubectl apply -f ./demo/client.yaml --kubeconfig=./aks-config
          kubectl apply -f ./demo/management.yaml --kubeconfig=./aks-config
          kubectl get ing -n=management-ui --kubeconfig=aks-config
          echo "Please wait 3-5 min before check kubectl get ing -n=management-ui"
      continue-on-error: true

    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create environment"